name: Deploy infraestructura e insertar datos

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Clonar el repositorio
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Configurar Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.4.6"

    # 3. Exportar credenciales de Azure para Terraform
    - name: Set Azure credentials
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    # 4. Inicializar y aplicar Terraform
    - name: Terraform Init
      working-directory: ./infra
      run: terraform init

    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan -out=tfplan
      continue-on-error: false

    - name: Azure Login (for pre-checks)
      run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    - name: Wait for SQL Server to be ready
      run: |
        echo "Checking if SQL Server is ready..."
        max_wait=300  # 5 minutes
        wait_time=0
        while [ $wait_time -lt $max_wait ]; do
          # Check if server is available and not busy
          server_status=$(az sql server show --name serverproyectoin --resource-group recursosproyecto --query "state" -o tsv 2>/dev/null || echo "NotFound")
          if [ "$server_status" = "Ready" ] || [ "$server_status" = "NotFound" ]; then
            echo "SQL Server is ready or doesn't exist yet. Proceeding..."
            break
          else
            echo "SQL Server is in state: $server_status. Waiting..."
            sleep 30
            wait_time=$((wait_time + 30))
          fi
        done

    - name: Terraform Apply with Retry
      working-directory: ./infra
      run: |
        max_attempts=5
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          if terraform apply tfplan; then
            echo "Terraform apply succeeded on attempt $attempt"
            break
          else
            echo "Terraform apply failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "All attempts failed"
              exit 1
            fi
            echo "Waiting 60 seconds before retry..."
            sleep 60
            # Regenerate plan for retry
            terraform plan -out=tfplan
            attempt=$((attempt + 1))
          fi
        done

    # 5. Instalar sqlcmd
    - name: Install sqlcmd tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
        sudo curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev

   